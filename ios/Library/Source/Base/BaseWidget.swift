/**
* Copyright (c) 2000-present Liferay, Inc. All rights reserved.
*
* This library is free software; you can redistribute it and/or modify it under
* the terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; either version 2.1 of the License, or (at your option)
* any later version.
*
* This library is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
* details.
*/
import UIKit
import QuartzCore

/*!
 * BaseWidget is the base class from which all Widget classes must inherit. 
 * A widget is the container for a widget view.
 */
@IBDesignable class BaseWidget: UIView, LRCallback {

	@IBInspectable var Theme:UIImage? {
	didSet {
		setNeedsLayout()
	}
	}

	var defaultTheme:UIImage?

	lazy var mockupLayer: CALayer = {
		return CALayer()
		}()

	override func prepareForInterfaceBuilder() {
		let bundle = NSBundle(forClass:self.dynamicType)
		let fileName = bundle.pathForResource("theme-default", ofType: "png")
		defaultTheme = UIImage(contentsOfFile: fileName)
		/*
		let processInfo = NSProcessInfo.processInfo()
		let environment = processInfo.environment
		let projectSourceDirectories : AnyObject = environment["IB_PROJECT_SOURCE_DIRECTORIES"]!
		let directories = projectSourceDirectories.componentsSeparatedByString(":")

		if directories.count != 0 {
		let firstPath = directories[0] as String
		var imagePath: String = firstPath.stringByAppendingPathComponent("login-mockup.png")

		defaultTheme = UIImage(contentsOfFile: imagePath)
		}
		*/
	}

	override func layoutSubviews() {
		super.layoutSubviews()

		if widgetView {
			return
		}


		if mockupLayer.superlayer != layer {
			layer.addSublayer(mockupLayer)
		}

		var themeToUse:UIImage = defaultTheme!

		if let themeImageValue = Theme {
			themeToUse = themeImageValue
		}

		let imageRect = CGRectMake(0, 0, themeToUse.size.width, themeToUse.size.height)

		mockupLayer.bounds = imageRect
		mockupLayer.position = CGPointMake(bounds.size.width/2.0, bounds.size.height/2.0)

		mockupLayer.contents = themeToUse.CGImage
	}



	var widgetView: BaseWidgetView?

	// DISPLAY TEMPLATE METHODS


	/*
	 * onCreate is invoked after the widget is created. Override this method to set custom values for the widget
	 * properties.
	 */
	public func onCreate() {
	}

	/*
	 * onHide is invoked when the widget is hidden from the app window.
	 */
	public func onHide() {
	}
    
	/*
	 * onShow is invoked when the widget is displayed on the app window. Override this method for example to reset
	 * values when the widget is shown.
	 */
	public func onShow() {
	}


	// SERVER RESPONSE TEMPLATE METHODS


	/*
	 * onServerError is invoked when there is an error communicating with the Liferay server.
	 */
	public func onServerError(error: NSError) {
	}

	/*
	 * onServerResult is invoked when there is an result from a communication with the Liferay server. The type of the
	 * result will depend on the invocation done from specific subclasses.
	 */
	public func onServerResult(dict:[String:AnyObject]) {
	}

    
	// USER ACTIONS TEMPLATE METHOD


	/*
	 * onCustomAction is invoked when a TouchUpInside even is fired from the UI.
	 */
	public func onCustomAction(actionName:String?, sender:UIControl) {
	}


	// UIView METHODS


	override func awakeFromNib() {
		clipsToBounds = false;

		widgetView = loadWidgetView();

		onCreate()
	}
    
	override func becomeFirstResponder() -> Bool {
		return widgetView!.becomeFirstResponder()
	}
    
	override func didMoveToWindow() {
		if (self.window) {
			self.onShow();
		}
		else {
			self.onHide();
		}
	}


	// LRCallback PRIVATE METHODS


	func onFailure(error: NSError!) {
		onServerError(error ? error : NSError(domain: "LiferayWidget", code: 0, userInfo: nil))
	}

	func onSuccess(result: AnyObject!) {
		if result is NSDictionary {
			onServerResult(result as [String:AnyObject])
		}
		else {
			onServerResult(["result": result])
		}
	}

	
	// OTHER PRIVATE METHODS
	
	
	private func loadWidgetView() -> BaseWidgetView? {
		let view = self.createWidgetViewFromNib();

		if let viewValue = view {
			viewValue.frame = CGRectMake(0, 0, self.frame.size.width, self.frame.size.height)
			viewValue.customAction = self.onCustomAction;

			self.addSubview(viewValue)
		}

		return view;
	}

	private func createWidgetViewFromNib() -> BaseWidgetView? {
		//		let className = NSStringFromClass(self.dynamicType)
		// You may use NSStringFromClass if you annotate all *Widget classes with @objc(*Widget). 
		// That way, we have control over underlaying ObjC autogenerated class

		let className = nameOfClass(self.dynamicType)

		let widgetName = className.componentsSeparatedByString("Widget")[0]
		let viewName = widgetName + "View"

		let currentTheme = currentThemeName()
		if !currentTheme {
			return nil
		}

		var nibName = viewName + "-" + currentTheme!
		var nibPath = NSBundle.mainBundle().pathForResource(nibName, ofType:"nib")

		if !nibPath {
			nibName = viewName
			nibPath = NSBundle.mainBundle().pathForResource(nibName, ofType:"nib")

			if !nibPath {
				return nil
			}
		}

		let views = NSBundle.mainBundle().loadNibNamed(nibName, owner:self, options:nil)
		assert(views.count > 0, "Xib seems to be malformed. There're no views inside it");

		let foundView = (views[0] as BaseWidgetView)

		foundView.backgroundColor = UIColor.clearColor()

		return foundView
	}

	private func currentThemeName() -> String? {
		var themePath = NSBundle.mainBundle().pathForResource("theme-default", ofType:"png")
		if !themePath {
			return nil
		}

		if !Theme {
			return "default"
		}

		let themeData = UIImagePNGRepresentation(Theme!)!

		let registeredThemes = ["default", "ios7", "color", "dark", "flat"];

		for theme in registeredThemes {
			let mockup = UIImage(named: "theme-" + theme)
			let mockupData = UIImagePNGRepresentation(mockup)!

			if mockupData.isEqualToData(themeData) {
				return theme
			}
		}

		return "default"
	}

}